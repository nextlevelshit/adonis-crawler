{% extends 'master' %}

{% block content %}
  <div class="__banner">
    <div class="banner__inner">
      <h2>Adonis Crawler</h2>
      <span>Visual Web Crawler based on AdonisJs</span>
      <div class="crawler">
        <form>
          <input type="text" name="url" value="{% if url %}{{ url }}{% else %}http://{% endif %}" autocomplete="off">
          <button name="submit">Start Crawling</button>
        </form>
        <ul class="results">
          <li>Bisher noch keine Suchergebnisse</li>
        </ul>
      </div>
    </div>
  </div>
{% endblock %}

{% block scripts %}
  <script src="//unpkg.com/adonis-websocket-client/dist/ws.min.js"></script>
  <script>
    const channel = 'crawler'
    const io = ws('')
    // start connection to channel
    const client = io.channel(channel).connect((error, response) => {
      console.log((error)
        ? error
        : `Connected successfully to Socket`)
    })
    client.on('disable', (response) => {
      c.disable(response)
    })
    client.on('results', (response) => {
      c.results(response)
    })

    var Crawly = function (element) {
      this.urlEl = () => element.querySelector('input[type=text]')
      this.submitEl = () => element.querySelector('button')
      this.resultsEl = () => element.querySelector('ul.results')

      this.start = (event) => {
        // preventing from submitting formular
        event.preventDefault()
        // starting crawling
        client.emit('start', this.urlEl().value)
      }
      // triggering if form elements are disabled while crawling and un-disabled after search results responded
      this.disable = (value) => {
        this.urlEl().disabled = value
        this.submitEl().disabled = value
      }
      // showing up crawl results from websocket
      this.results = (list) => {
        // removing old children from result list
        while (child = this.resultsEl().firstChild) {
          this.resultsEl().removeChild(child)
        }
        // adding results to result list
        list.forEach((link) => {
          // creating new element, which will be appended to result list
          var newEl = document.createElement('li')
          newEl.appendChild(document.createTextNode(link))

          console.log(newEl)
          // appending new child to result list
          this.resultsEl().appendChild(newEl)
        })
      }
      // adding click listener to form submit
      this.submitEl().addEventListener('click', this.start.bind(this), false)
    }
    // tracking send form event
    const c = new Crawly(document.querySelector('.crawler'))
  </script>
{% endblock %}
